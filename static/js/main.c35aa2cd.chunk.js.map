{"version":3,"sources":["components/AddTask.js","components/Task.js","components/ActiveTasksSort.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","message","err","messages","incorrect_text","incorrect_date","handleInputTextChange","e","setState","target","value","handleInputCheckbox","handleInputDateChange","handleClick","console","log","validation","FormValidation","correct","props","add","length","this","setTimeout","className","onChange","type","placeholder","id","htmlFor","min","onClick","Component","Task","task","active","important","finishDate","style","color","done","delete","finish","toLocaleString","ActiveTasksSort","name","select","TaskList","handleSelect","sortActiveTasks","option","tasks","filter","sort","a","b","getTime","highPriority","lowPriority","concat","doneTasks","map","key","activeTasks","App","counter","handleDoneTask","forEach","prevState","handleDeleteTask","Array","from","index","findIndex","splice","handleAddTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c35aa2cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css'\r\n\r\nclass AddTask extends Component {\r\n\r\n  minDate = (new Date().toISOString()).slice(0, 10)\r\n\r\n  // date = new Date(this.minDate).getTime()\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate,\r\n    message: \"\",\r\n    err: {\r\n      text: false,\r\n      date: false\r\n    }\r\n  }\r\n\r\n  messages = {\r\n    incorrect_text: \"text musi zawierać więcej niż dwa znaki\",\r\n    incorrect_date: \"data z kalendarza nie została wybrana\"\r\n  }\r\n\r\n  handleInputTextChange = (e) => {\r\n    this.setState({\r\n      text: e.target.value\r\n    })\r\n  }\r\n\r\n  handleInputCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked\r\n    })\r\n  }\r\n\r\n  handleInputDateChange = (e) => {\r\n    this.setState({\r\n      date: e.target.value\r\n    })\r\n  }\r\n\r\n  handleClick = () => {\r\n    const { text, checked, date } = this.state\r\n    console.log(\"działa w AddTask\", text, checked, date)\r\n\r\n    const validation = this.FormValidation()\r\n    console.log(validation.correct)\r\n    if (validation.correct) {\r\n      this.props.add(text, checked, date)\r\n      this.setState({\r\n        text: \"\",\r\n        checked: false,\r\n        date: this.minDate,\r\n        message: \"Zadanie zostało dodane\",\r\n        err: {\r\n          text: false,\r\n          date: false\r\n        }\r\n      })\r\n    } else {\r\n      this.setState({\r\n        err: {\r\n          text: !validation.text,\r\n          date: !validation.date\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  FormValidation = () => {\r\n    let text = false;\r\n    let date = false;\r\n    let correct = false\r\n    if (this.state.text.length > 2) text = true\r\n    if (this.state.date !== \"\") date = true\r\n    if (text && date) correct = true\r\n    return (\r\n      {\r\n        text,\r\n        date,\r\n        correct\r\n      }\r\n    )\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.message) {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          message: \"\"\r\n        })\r\n      }, 2000)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.date)\r\n    // console.log(this.minDate)\r\n    // console.log(this.state.text)\r\n    // console.log(this.state.err.text)\r\n\r\n\r\n    return (\r\n      <>\r\n        <div className=\"form\">\r\n          <input\r\n            onChange={this.handleInputTextChange}\r\n            value={this.state.text}\r\n            type=\"text\"\r\n            placeholder=\"wpisz zadanie\"\r\n          />\r\n          {this.state.err.text && <span className=\"date\">{this.messages.incorrect_text}</span>}\r\n          <br />\r\n          <input\r\n            onChange={this.handleInputCheckbox}\r\n            type=\"checkbox\"\r\n            checked={this.state.checked}\r\n            id=\"important\"\r\n          />\r\n          <label htmlFor=\"important\">Priorytet</label>\r\n          <br />\r\n          <label className=\"date\" htmlFor=\"date\"> Do kiedy zrobić\r\n            <input\r\n              onChange={this.handleInputDateChange}\r\n              value={this.state.date}\r\n              type=\"date\" min={this.minDate}\r\n              id=\"date\" />\r\n          </label>\r\n          {this.state.err.date && <span className=\"date\">{this.messages.incorrect_date}</span>}\r\n          <br />\r\n          <button onClick={this.handleClick}>Dodaj</button>\r\n          {this.state.message && <span className=\"send\">{this.state.message}</span>}\r\n        </div>\r\n        <hr />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\nimport './Task.css'\r\nconst Task = (props) => {\r\n  const { active, important, text, date, id, finishDate } = props.task\r\n  const style = { color: \"red\" }\r\n\r\n  if (active) {\r\n    return (\r\n      <div className=\"task\">\r\n        <p ><strong style={important && active ? style : null}>{text}</strong> - do {date}\r\n          <button className=\"done\" onClick={() => props.done(id)}>Zostało zrobione</button>\r\n          <button className=\"delete\" onClick={() => props.delete(id)}>Usuń</button>\r\n          {/* {new Date(date).getTime()} */}\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString()\r\n    return (\r\n      <div className=\"task\">\r\n        <p><strong>{text}</strong> <em>zrobić do ({date})</em>\r\n          <br />\r\n          -potwierdzenie wykonania <span>{finish}</span>\r\n          <button className=\"finish\" onClick={() => props.delete(id)}>Usuń</button>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Task;","\r\n/*\r\n// import React from 'react';\r\nimport React, { Component } from 'react';\r\nclass TasksSort extends Component {\r\n  state = {\r\n    value: 0\r\n  }\r\n\r\n  handleSelect = (e) => {\r\n    this.setState({\r\n      value: e.target.value\r\n    })\r\n  }\r\n  render() {\r\n    console.log(this.props.active)\r\n    return (\r\n      <label htmlFor=\"\">Sposób wyświetlania\r\n    <select name=\"\" id=\"\" value={this.state.value} onChange={this.handleSelect}>\r\n          <option value=\"0\">Po kolejności dodania zadania</option>\r\n          <option value=\"1\">Po dacie \"do zrobienia\"</option>\r\n          <option value=\"2\">Po Priorytecie</option>\r\n        </select>\r\n      </label>);\r\n  }\r\n}\r\n\r\nexport default TasksSort;\r\n\r\n*/\r\nimport React from 'react';\r\nimport './ActiveTaskSort.css'\r\nconst ActiveTasksSort = (props) => {\r\n  return (\r\n\r\n    <label htmlFor=\"\"><span>Sposób wyświetlania</span>\r\n      <select name=\"\" id=\"\" value={props.value} onChange={props.select}>\r\n        <option value=\"0\">Po kolejności dodania zadania</option>\r\n        <option value=\"1\">Po dacie: \"do zrobienia\"</option>\r\n        <option value=\"2\">Po Priorytecie</option>\r\n      </select>\r\n    </label>\r\n\r\n  );\r\n}\r\n\r\nexport default ActiveTasksSort;","/*\r\nimport React from 'react';\r\nimport Task from './Task'\r\nimport TasksSort from './TasksSort'\r\nconst TaskList = (props) => {\r\n\r\n  const active = props.tasks.filter(task => task.active)\r\n  const done = props.tasks.filter(task => !task.active)\r\n\r\n  done.sort((a, b) => b.finishDate - a.finishDate)\r\n  // active.sort((a, b) => {\r\n  //   console.log(new Date(b.date).getTime())\r\n  //   // const a_date = new Date(a.date).getTime()\r\n  //   // const b_date = new Date(b.date).getTime()\r\n  //   return new Date(a.date).getTime() - new Date(b.date).getTime()\r\n  // })\r\n\r\n  const activeTasks = active.map(task => (\r\n    <Task key={task.id} task={task} done={props.done} delete={props.delete} />\r\n  ))\r\n\r\n\r\n  const doneTasks = done.map(task => (\r\n    <Task key={task.id} task={task} done={props.done} delete={props.delete} />\r\n  ))\r\n  // console.log(activeTasks)\r\n  return (\r\n\r\n    <>\r\n      <div className=\"taskList\">\r\n        <h2>Zadania do zrobienia ({activeTasks.length})</h2>\r\n        <TasksSort active={active} />\r\n\r\n        {activeTasks}\r\n        <hr />\r\n        <h3>Zadania zrobione({doneTasks.length})</h3>\r\n\r\n        {doneTasks}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TaskList;\r\n\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport Task from './Task'\r\nimport ActiveTasksSort from './ActiveTasksSort'\r\nimport './TaskList.css'\r\nclass TaskList extends Component {\r\n  state = {\r\n    value: \"0\"\r\n  }\r\n\r\n\r\n  handleSelect = (e) => {\r\n    console.log(e.target.value)\r\n    this.setState({\r\n      value: e.target.value\r\n    })\r\n  }\r\n\r\n  sortActiveTasks = (option) => {\r\n    console.log(\"sort\")\r\n    const active = this.props.tasks.filter(task => task.active)\r\n\r\n\r\n    if (option === \"0\") return active\r\n    else if (option === \"1\") {\r\n      active.sort((a, b) => {\r\n        // console.log(new Date(b.date).getTime())\r\n        return new Date(a.date).getTime() - new Date(b.date).getTime()\r\n      })\r\n      return active\r\n    } else if (option === \"2\") {\r\n      const highPriority = active.filter(task => task.important)\r\n      highPriority.sort((a, b) => {\r\n        return new Date(a.date).getTime() - new Date(b.date).getTime()\r\n      })\r\n      const lowPriority = active.filter(task => !task.important)\r\n      lowPriority.sort((a, b) => {\r\n        return new Date(a.date).getTime() - new Date(b.date).getTime()\r\n      })\r\n      const sortedHighAndLowPriority = highPriority.concat(lowPriority)\r\n      return sortedHighAndLowPriority\r\n    }\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.value)\r\n    const active = this.sortActiveTasks(this.state.value)\r\n    console.log(active)\r\n    const done = this.props.tasks.filter(task => !task.active)\r\n    done.sort((a, b) => b.finishDate - a.finishDate)\r\n    const doneTasks = done.map(task => (\r\n      <Task key={task.id} task={task} done={this.props.done} delete={this.props.delete} />\r\n    ))\r\n    const activeTasks = active.map(task => (\r\n      <Task key={task.id} task={task} done={this.props.done} delete={this.props.delete} />\r\n    ))\r\n    return (\r\n      <>\r\n        <div className=\"taskList\">\r\n          <h2>Zadania do zrobienia ({activeTasks.length})</h2>\r\n          {active.length === 0} <div className=\"activeTask\">\r\n            {active.length > 1 && <ActiveTasksSort\r\n              select={this.handleSelect}\r\n              value={this.state.value}\r\n            />}\r\n            {active.length === 0 ? <h3 className=\"noTasks\">Nie masz żadnych zadań do zrobienia</h3> : activeTasks}\r\n          </div>\r\n          <hr />\r\n          <h3>Zadania zrobione({doneTasks.length})</h3>\r\n          <div className=\"doneTask\">\r\n            {doneTasks}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskList;","import React, {\n  Component\n} from 'react';\nimport AddTask from './AddTask'\nimport TaskList from './TaskList';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    tasks: [{\n      id: 10,\n      text: 'zagrać wreszcie w Wiedźmina',\n      date: '2020-09-15',\n      important: true,\n      active: true,\n      finishDate: null\n    },\n    {\n      id: 20,\n      text: \"zrobić dobry uczynek\",\n      date: '2020-11-12',\n      important: false,\n      active: true,\n      finishDate: null\n    },\n    {\n      id: 30,\n      text: \"pomalować mieszkanie\",\n      date: '2020-05-11',\n      important: false,\n      active: true,\n      finishDate: null\n    },\n    {\n      id: 40,\n      text: \"wrócic do formy z przed 5 lat\",\n      date: '2021-10-20',\n      important: true,\n      active: true,\n      finishDate: null\n    },\n    {\n      id: 50,\n      text: \"remont kuchni\",\n      date: '2022-11-12',\n      important: false,\n      active: true,\n      finishDate: null\n    },\n    {\n      id: 60,\n      text: \"posadzic drzewo\",\n      date: '2020-09-11',\n      important: false,\n      active: true,\n      finishDate: null\n    },\n    {\n      id: 70,\n      text: \"fryzjer!!!\",\n      date: '2020-05-20',\n      important: true,\n      active: true,\n      finishDate: null\n    },\n    {\n      id: 80,\n      text: \"nie odbierać poleconego od komornika\",\n      date: '2020-11-12',\n      important: false,\n      active: true,\n      finishDate: null\n    },\n    {\n      id: 90,\n      text: \"kupić 2 butelki litrowe\",\n      date: '2020-09-11',\n      important: false,\n      active: true,\n      finishDate: null\n    },\n\n    ]\n  }\n\n  counter = this.state.tasks.length * 10\n\n  handleDoneTask = (id) => {\n    // console.log(id)\n    const tasks = [...this.state.tasks]\n    tasks.forEach(task => {\n      if (id === task.id) {\n        task.active = false\n        task.finishDate = new Date().getTime()\n      }\n    })\n    this.setState(prevState => ({\n      tasks\n    }))\n  }\n\n  handleDeleteTask = (id) => {\n    // console.log(id)\n    const tasks = Array.from(this.state.tasks)\n    const index = tasks.findIndex(task => task.id === id)\n    console.log(index)\n    tasks.splice(index, 1)\n    // console.log(tasks)\n    this.setState(prevState => ({\n      tasks: tasks\n    }))\n  }\n\n  handleAddTask = (text, checked, date) => {\n    console.log(\"działa w App.js\", text, checked, date)\n    this.counter += 10\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important: checked,\n      active: true,\n      finishDate: null\n    }\n    this.setState(prevState => ({\n      tasks: [...this.state.tasks, task]\n    }))\n  }\n\n  render() {\n    // console.log(new Date(this.state.tasks[0].date).getTime())\n    // console.log(this.counter)\n    return (<div className=\"App\" >\n      <h1 > TODO APP </h1>\n      <AddTask add={this.handleAddTask}\n      />\n      <TaskList tasks={this.state.tasks}\n        done={this.handleDoneTask}\n        delete={this.handleDeleteTask}\n      />\n    </div >\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}